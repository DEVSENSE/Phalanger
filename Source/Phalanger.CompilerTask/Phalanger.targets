<!--
 Copyright (c) 2011 DEVSENSE.

 The use and distribution terms for this software are contained in the file named License.txt, 
 which can be found in the root of the Phalanger distribution. By using this software 
 in any fashion, you are agreeing to be bound by the terms of this license.
 
 You must not remove this notice from this software.

-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Add properties required for WPF -->
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildExtensionsPath)\Phalanger\3.0\Phalanger.targets</MSBuildAllProjects>
    <DefaultLanguageSourceExtension>.php</DefaultLanguageSourceExtension>
    <Language>Phalanger</Language>
  </PropertyGroup>

  <!--Import the standards targets-->
  <Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />

  <!--Reference the assembly where our tasks are defined-->
  <UsingTask TaskName="PHP.VisualStudio.PhalangerTasks.PhalangerCompilerTask" AssemblyFile="PHP.VisualStudio.PhalangerTasks.dll" />
  <UsingTask TaskName="CreateCSharpManifestResourceName" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"/>

  <!--Compile target (this is the target that calls the compiler task)-->
  <Target Name="PhalangerCompilerTarget"
          Inputs="@(Compile);@(ReferencePath);@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile);@(Content)"
          Outputs="@(IntermediateAssembly)">
    <Message Text="Building: @(IntermediateAssembly)" />
      <PhalangerCompilerTask
        SourceRoot="$(MSBuildProjectDirectory)"
        SourceFiles="@(Compile)"
        ContentFiles="@(Content)"
        ReferencedAssemblies="@(Reference)"
        ReferencedProjects="@(ProjectReference)"
        References="@(ReferencePath)"
        Debug="$(IncludeDebugInformation)"
        StartupObject="$(StartupObject)"
        OutputType="$(OutputType)"
        OutputAssembly="@(IntermediateAssembly)"
        CompilationMode="$(CompilationMode)"
        ApplicationIcon="$(ApplicationIcon)"
        LanguageFeatures="$(LanguageFeatures)"
        DisabledWarnings="$(DisabledWarnings)"
        KeyFile="$(KeyFile)"
        TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
        ResourceFiles="@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile)"
      />
  </Target>

  <!--This is an override of CoreCompile to have our PhalangerCompilerTarget be called at compile time-->
  <Target
      Name="CoreCompile"
      Inputs="@(Compile);
              @(ReferencePath)"
      Outputs="@(IntermediateAssembly)" 
      DependsOnTargets="$(CoreCompileDependsOn);PhalangerCompilerTarget"
    >
  </Target>

  <!--
    The CreateManifestResourceNames target create the manifest resource names from the .RESX
    files.

        [IN]
        @(ResxWithNoCulture) - The names the non-culture .RESX files.
        @(ResxWithCulture) - The names the culture .RESX files.
        @(NonResxWithNoCulture) - The names of the non-culture non-RESX files (like bitmaps, etc).
        @(NonResxWithCulture) - The names of the culture non-RESX files (like bitmaps, etc).

        [OUT]
        @(ManifestResourceWithNoCultureName) - The corresponding manifest resource name (.RESOURCE)
        @(ManifestResourceWithCultureName) - The corresponding manifest resource name (.RESOURCE)
        @(ManifestNonResxWithNoCulture) - The corresponding manifest resource name.
        @(ManifestNonResxWithCulture) - The corresponding manifest resource name.

    For Phalanger applications the transformation is like:

        Resources1.resx => RootNamespace.Resources1 => Build into main assembly
        SubFolder\Resources1.resx => RootNamespace.SubFolder.Resources1 => Build into main assembly
        Resources1.fr.resx => RootNamespace.Resources1.fr => Build into satellite assembly
        Resources1.notaculture.resx => RootNamespace.Resources1.notaculture => Build into main assembly

    For other project systems, this transformation may be different.
    -->
  <PropertyGroup>
    <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
  </PropertyGroup>
  <Target
      Name="CreateManifestResourceNames"
      Condition="'@(ResxWithNoCulture)@(ResxWithCulture)@(NonResxWithNoCulture)@(NonResxWithCulture)'!=''"
      DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
        >

    <!-- Create the target resource names for non-culture resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(ResxWithNoCulture)'!=''"
          ResourceFiles="@(ResxWithNoCulture)"
          RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithNoCultureName"/>

    </CreateCSharpManifestResourceName>

    <!-- Create the target resource names for culture resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(ResxWithCulture)'!=''"
          ResourceFiles="@(ResxWithCulture)"
          RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithCultureName"/>

    </CreateCSharpManifestResourceName>

    <!-- Create the target resource names for non-culture non-resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(NonResxWithNoCulture)'!=''"
          ResourceFiles="@(NonResxWithNoCulture)"
          RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithNoCulture"/>

    </CreateCSharpManifestResourceName>

    <!-- Create the target resource names for culture non-resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(NonResxWithCulture)'!=''"
          ResourceFiles="@(NonResxWithCulture)"
          RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithCulture"/>

    </CreateCSharpManifestResourceName>
  </Target>

</Project>