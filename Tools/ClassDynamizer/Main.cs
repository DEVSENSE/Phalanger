using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

using ICSharpCode.NRefactory.Parser;
using ICSharpCode.NRefactory.Parser.AST;
using ICSharpCode.NRefactory.PrettyPrinter;

namespace ClassDynamizer
{
	class Program
	{
		/// <summary>
		/// Dynamizes a list of files.
		/// </summary>
		/// <param name="files">The files to dynamize.</param>
		/// <param name="outDir">The output directory or <B>null</B>.</param>
		static void DynamizeFiles(List<string> files, string outDir)
		{
			Dynamizer dynamizer = new Dynamizer();

			foreach (string file in files)
			{
				Console.WriteLine("Dynamizing types in '{0}'", file);

				IParser parser;
				CompilationUnit unit;

				string ext = Path.GetExtension(file).ToLower();

				using (StreamReader sr = new StreamReader(file))
				{
					switch (ext)
					{
						case ".cs": parser = ParserFactory.CreateParser(SupportedLanguage.CSharp, sr); break;
						case ".vb": parser = ParserFactory.CreateParser(SupportedLanguage.VBNet, sr); break;
						default:
							throw new ArgumentException("Unknown language.");
					}

					parser.ParseMethodBodies = true;
					parser.Parse();

					if (parser.Errors.count > 0)
					{
                        throw new ArgumentException("Parse error: " + parser.Errors.ErrorOutput);
					}

					unit = parser.CompilationUnit;
				}

				unit = dynamizer.Dynamize(unit);

				string out_path = Path.ChangeExtension(file, ".dynamic" + Path.GetExtension(file));
				if (outDir != null) out_path = Path.Combine(outDir, Path.GetFileName(out_path));

				try
				{
					using (StreamWriter sw = new StreamWriter(out_path))
					{
						IOutputASTVisitor visitor;
						switch (ext)
						{
							case ".cs":
							{
								sw.WriteLine("// ***");
								sw.WriteLine("// Do not edit this file. It has been generated by the ClassDynamizer tool.");
								sw.WriteLine("// ***");
								sw.WriteLine("#pragma warning disable 0108");
								visitor = new CSharpOutputVisitor();
								break;
							}

							case ".vb":
							{
								sw.WriteLine("' ***");
								sw.WriteLine("' Do not edit this file. It has been generated by the ClassDynamizer tool.");
								sw.WriteLine("' ***");
								visitor = new VBNetOutputVisitor();
								break;
							}

							default:
							throw new ArgumentException("Unknown language.");
						}

						unit.AcceptVisitor(visitor, DBNull.Value);

						sw.Write(visitor.Text);
					}
				}
				catch (UnauthorizedAccessException)
				{
					Console.WriteLine("Could not write to '{0}'. Is the file checked out?", out_path);
				}
			}
		}

		static void Main(string[] args)
		{
			Console.WriteLine("Phalanger class dynamizer v2.0");

			if (args.Length == 0 || (args.Length == 1 && (args[0] == "/?" || args[0] == "-?")))
			{
				Console.WriteLine("This tool performs source code dynamization. Types marked by [ImplementsType]");
				Console.WriteLine("are converted to fully dynamic types as produced by the Phalanger compiler.");
				Console.WriteLine("Only members marked by [PhpVisible] will be accessible from PHP.");
				Console.WriteLine();
				Console.WriteLine("Note: This tool has its limitations, see the XmlDom managed extension for");
				Console.WriteLine("      an example on how to write classes suitable for dynamization.");
				Console.WriteLine();
				Console.WriteLine("Usage: ClassDynamizer SourceFile [AnotherSourceFile ...] [/out:DestinationDirectory]");
				Console.WriteLine();
				Console.WriteLine("Language is detected automatically based on file extensions.");
			}
			else
			{
				List<string> files = new List<string>();
				string out_dir = null;

				for (int i = 0; i < args.Length; i++)
				{
					string str = args[i];
					if (str.StartsWith("/out:")) out_dir = str.Substring(5);
					else files.Add(str);
				}

				DynamizeFiles(files, out_dir);
			}
		}
	}
}
